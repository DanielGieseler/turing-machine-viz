{"version":3,"sources":["webpack:///TMViz.bundle.js","webpack:///webpack/bootstrap 768404880fcd2ada2b47","webpack:///external \"_\"","webpack:///external \"d3\"","webpack:///external \"lodash\"","webpack:///./src/TMViz.js","webpack:///./src/TuringMachine.js","webpack:///./src/watch.js","webpack:///./src/state-diagram/StateViz.css","webpack:///./src/tape/tape.css","webpack:///./src/state-diagram/StateGraph.js","webpack:///./src/state-diagram/StateViz.js","webpack:///./src/tape/Tape.js","webpack:///./src/tape/TapeViz.js"],"names":["TMViz","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","parentJsonpFunction","window","chunkIds","moreModules","chunkId","i","callbacks","length","installedChunks","push","apply","shift",0,"e","callback","undefined","head","document","getElementsByTagName","script","createElement","type","charset","async","src","p","1","appendChild","m","c","_",2,"d3",5,"lodash",10,"animatedTransition","graph","animationCallback","state","symbol","tuple","getInstructionAndEdge","edge","instruction","pulseEdge","edgepath","select","domNode","normalColor","style","pulseColor","classed","transition","duration","each","this","addTape","div","spec","TapeViz","append","attr","blank","input","String","split","posTable","animateAndContinue","self","edgeAnimation","isRunning","stepInterval","step","StateGraph","table","__stateviz","StateViz","getVertexMap","getEdges","positionTable","machine","TuringMachine","startState","watchInit","prop","oldstate","newstate","getVertex","isHalted","Object","defineProperty","configurable","get","set","value","__parentDiv","__spec","prototype","reset","tape","remove",11,"move","direction","MoveHead","right","headRight","left","headLeft","TypeError","toString","instruct","nextInstruction","write","defineProperties","read","enumerable","freeze","MoveTape",16,"watch","thisArg","handler","desc","getOwnPropertyDescriptor","writable","accessors","newval","val",19,20,46,"deriveGraph","mapValues","transitions","label","allEdges","forEach","vertex","edgeTo","target","cache","tap","source","labels","bind","stateTransitions","symbolKey","symbols","reduce","acc","x","labelFor","normalize","edges","defaults","action","rightSide","visibleSpace","map","join","derived","__graph","__edges","Error",47,"addV","array1","array2","negateV","array","subtractV","multiplyV","scalar","normSqV","sq","add","y","normV","Math","sqrt","unitV","n","angleV","atan2","vectorFromLengthAngle","angle","cos","sin","EdgeCounter","key","index","edgePathFor","nodeRadius","shape","d","loopEndOffset","loopArc","EdgeShape","loop","PI","x1","y1","arc","p1","p2","offset","radius","sep","straight","rectCenter","svgrect","width","height","identity","noop","limitRange","min","max","svg","nodes","linkArray","dragstart","fixed","dragend","releasenode","force","resume","w","h","linkDistance","colors","scale","category10","viewBox","version",":xmlns",":xmlns:xlink","nodeArray","Array","values","__stateMap","layout","links","size","charge","theta","gravity","start","drag","on","edgeCounter","edgeselection","selectAll","data","enter","edgegroups","labelAbove","labelBelow","edgeD","edgeIndex","group","class","text","shapeForEdge","getPath","refreshLabels","getBBox","isFlipped","shouldFlip","edgepaths","nodeSelection","nodecircles","nodelabels","svgdefs","refX","lastIndexOf","orient","markerWidth","markerHeight","cx","cy","every","stop","setPositionTable","stateMap","node","position","assign","numEdgesFromTo","getPositionTable","pick",48,"Tape","before","after","slice","reverse","last","pop","isEmpty","readOffset","readRange","end","range",49,"initTapeCells","selection","datum","cellWidth","cellHeight","positionCells","repositionWrapper","wrapper","lookaround","moveHead","exit","wOffset","cOffset","create","constructor","childNodes","insert"],"mappings":"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","file":"TMViz.bundle.js","sourcesContent":["var TMViz =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// install a JSONP callback for chunk loading\n/******/ \tvar parentJsonpFunction = window[\"webpackJsonp_name_\"];\n/******/ \twindow[\"webpackJsonp_name_\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n/******/ \t\t// add \"moreModules\" to the modules object,\n/******/ \t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n/******/ \t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\tchunkId = chunkIds[i];\n/******/ \t\t\tif(installedChunks[chunkId])\n/******/ \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n/******/ \t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t}\n/******/ \t\tfor(moduleId in moreModules) {\n/******/ \t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t}\n/******/ \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n/******/ \t\twhile(callbacks.length)\n/******/ \t\t\tcallbacks.shift().call(null, __webpack_require__);\n/******/ \t\tif(moreModules[0]) {\n/******/ \t\t\tinstalledModules[0] = 0;\n/******/ \t\t\treturn __webpack_require__(0);\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// object to store loaded and loading chunks\n/******/ \t// \"0\" means \"already loaded\"\n/******/ \t// Array means \"loading\", array contains callbacks\n/******/ \tvar installedChunks = {\n/******/ \t\t0:0\n/******/ \t};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n/******/ \t\t// \"0\" is the signal for \"already loaded\"\n/******/ \t\tif(installedChunks[chunkId] === 0)\n/******/ \t\t\treturn callback.call(null, __webpack_require__);\n/******/\n/******/ \t\t// an array means \"currently loading\".\n/******/ \t\tif(installedChunks[chunkId] !== undefined) {\n/******/ \t\t\tinstalledChunks[chunkId].push(callback);\n/******/ \t\t} else {\n/******/ \t\t\t// start chunk loading\n/******/ \t\t\tinstalledChunks[chunkId] = [callback];\n/******/ \t\t\tvar head = document.getElementsByTagName('head')[0];\n/******/ \t\t\tvar script = document.createElement('script');\n/******/ \t\t\tscript.type = 'text/javascript';\n/******/ \t\t\tscript.charset = 'utf-8';\n/******/ \t\t\tscript.async = true;\n/******/\n/******/ \t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({\"1\":\"main\"}[chunkId]||chunkId) + \".bundle.js\";\n/******/ \t\t\thead.appendChild(script);\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/build/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(10);\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports) {\n\n\tmodule.exports = _;\n\n/***/ },\n\n/***/ 2:\n/***/ function(module, exports) {\n\n\tmodule.exports = d3;\n\n/***/ },\n\n/***/ 5:\n/***/ function(module, exports) {\n\n\tmodule.exports = lodash;\n\n/***/ },\n\n/***/ 10:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Turing machine visualization component.\n\t *\n\t * • Adds running and reset on top of the base Turing machine.\n\t * • Displays an animated state diagram and tape diagram.\n\t * Does not include UI elements for controlling the machine.\n\t *\n\t * @module\n\t */\n\t\n\tvar TuringMachine = __webpack_require__(11).TuringMachine,\n\t    TapeViz = __webpack_require__(49),\n\t    StateGraph = __webpack_require__(46),\n\t    StateViz = __webpack_require__(47),\n\t    watchInit = __webpack_require__(16).watchInit,\n\t    d3 = __webpack_require__(2);\n\t\n\t/**\n\t * Create an animated transition function.\n\t * @param  {StateGraph} graph\n\t * @param  {LayoutEdge -> any} animationCallback\n\t * @return {(string, string) -> Instruction} Created transition function.\n\t */\n\tfunction animatedTransition(graph, animationCallback) {\n\t  return function (state, symbol) {\n\t    var tuple = graph.getInstructionAndEdge(state, symbol);\n\t    if (tuple == null) { return null; }\n\t\n\t    animationCallback(tuple.edge);\n\t    return tuple.instruction;\n\t  };\n\t}\n\t\n\t/**\n\t * Default edge animation callback.\n\t * @param  {{domNode: Node}} edge\n\t * @return {D3Transition} The animation. Use this for transition chaining.\n\t */\n\tfunction pulseEdge(edge) {\n\t  var edgepath = d3.select(edge.domNode);\n\t  // workaround for https://github.com/d3/d3-transition/issues/11\n\t  var normalColor = edgepath.style('stroke');\n\t  var pulseColor = d3.select('#active-arrowhead').style('stroke');\n\t  // TODO: animate arrowhead as well\n\t  return edgepath\n\t      .classed('active-edge', true)\n\t    .transition()\n\t      .style('stroke', pulseColor)\n\t      .style('stroke-width', '3')\n\t    .transition()\n\t      .style('stroke', normalColor)\n\t      .style('stroke-width', '1')\n\t    .transition()\n\t      .duration(0)\n\t      .each('start', /* @this edge */ function () {\n\t        d3.select(this).classed('active-edge', false);\n\t      })\n\t      .style('stroke', null)\n\t      .style('stroke-width', null);\n\t}\n\t\n\tfunction addTape(div, spec) {\n\t  return new TapeViz(div.append('svg').attr('class', 'tm-tape'), 9,\n\t    spec.blank, spec.input ? String(spec.input).split('') : []);\n\t}\n\t\n\t/**\n\t * Construct a new state and tape visualization inside a &lt;div&gt;.\n\t * @constructor\n\t * @param {HTMLDivElement} div        div to take over and use.\n\t * @param                  spec       machine specification\n\t * @param {PositionTable} [posTable]  position table for the state nodes\n\t */\n\tfunction TMViz(div, spec, posTable) {\n\t  div = d3.select(div);\n\t  var graph = new StateGraph(spec.table);\n\t  this.__stateviz = new StateViz(div.append('svg'),\n\t    graph.getVertexMap(),\n\t    graph.getEdges()\n\t  );\n\t  if (posTable != undefined) { this.positionTable = posTable; }\n\t\n\t  this.edgeAnimation = pulseEdge;\n\t  this.stepInterval = 100;\n\t\n\t  var self = this;\n\t  // We hook into the animation callback to know when to start the next step (when running).\n\t  function animateAndContinue(edge) {\n\t    var transition = self.edgeAnimation(edge);\n\t    if (self.isRunning) {\n\t      transition.transition().duration(self.stepInterval).each('end', function () {\n\t        // stop if machine was paused during the animation\n\t        if (self.isRunning) { self.step(); }\n\t      });\n\t    }\n\t  }\n\t\n\t  this.machine = new TuringMachine(\n\t    animatedTransition(graph, animateAndContinue),\n\t    spec.startState,\n\t    addTape(div, spec)\n\t  );\n\t  // intercept and animate when the state is set\n\t  watchInit(this.machine, 'state', function (prop, oldstate, newstate) {\n\t    d3.select(graph.getVertex(oldstate).domNode).classed('current-state', false);\n\t    d3.select(graph.getVertex(newstate).domNode).classed('current-state', true);\n\t    return newstate;\n\t  });\n\t\n\t  // Sidenote: each \"Step\" click evaluates the transition function once.\n\t  // Therefore, detecting halting always requires its own step (for consistency).\n\t  this.isHalted = false;\n\t\n\t  var isRunning = false;\n\t  /**\n\t   * Set isRunning to true to run the machine, and false to stop it.\n\t   */\n\t  Object.defineProperty(this, 'isRunning', {\n\t    configurable: true,\n\t    get: function () { return isRunning; },\n\t    set: function (value) {\n\t      if (isRunning !== value) {\n\t        isRunning = value;\n\t        if (isRunning) { this.step(); }\n\t      }\n\t    }\n\t  });\n\t\n\t  this.__parentDiv = div;\n\t  this.__spec = spec;\n\t}\n\t\n\t/**\n\t * Step the machine immediately and interrupt any animations.\n\t */\n\tTMViz.prototype.step = function () {\n\t  if (!this.machine.step()) {\n\t    this.isRunning = false;\n\t    this.isHalted = true;\n\t  }\n\t};\n\t\n\t/**\n\t * Reset the Turing machine to its starting configuration.\n\t */\n\tTMViz.prototype.reset = function () {\n\t  this.isRunning = false;\n\t  this.isHalted = false;\n\t  this.machine.state = this.__spec.startState;\n\t  this.machine.tape.domNode.remove();\n\t  this.machine.tape = addTape(this.__parentDiv, this.__spec);\n\t};\n\t\n\tObject.defineProperty(TMViz.prototype, 'positionTable', {\n\t  get: function ()  { return this.__stateviz.positionTable; },\n\t  set: function (posTable) { this.__stateviz.positionTable = posTable; }\n\t});\n\t\n\tmodule.exports = TMViz;\n\n\n/***/ },\n\n/***/ 11:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Construct a Turing machine.\n\t * @param {(state, symbol) -> ?{state: state, symbol: symbol, move: direction}}\n\t *   transition\n\t *   A transition function that, given *only* the current state and symbol,\n\t *   returns an object with the following properties: symbol, move, and state.\n\t *   Returning null/undefined halts the machine (no transition defined).\n\t * @param {state} startState  The state to start in.\n\t * @param         tape        The tape to use.\n\t */\n\tfunction TuringMachine(transition, startState, tape) {\n\t  this.transition = transition;\n\t  this.state = startState;\n\t  this.tape = tape;\n\t}\n\t\n\tTuringMachine.prototype.toString = function () {\n\t  return String(this.state) + '\\n' + String(this.tape);\n\t};\n\t\n\t/**\n\t * Step to the next configuration according to the transition function.\n\t * @return {boolean} true if successful (the transition is defined),\n\t *   false otherwise (machine halted)\n\t */\n\tTuringMachine.prototype.step = function () {\n\t  var instruct = this.nextInstruction;\n\t  if (instruct == null) { return false; }\n\t\n\t  this.tape.write(instruct.symbol);\n\t  move(this.tape, instruct.move);\n\t  this.state = instruct.state;\n\t\n\t  return true;\n\t};\n\t\n\tObject.defineProperties(TuringMachine.prototype, {\n\t  nextInstruction: {\n\t    get: function () { return this.transition(this.state, this.tape.read()); },\n\t    enumerable: true\n\t  },\n\t  isHalted: {\n\t    get: function () { return this.nextInstruction == null; },\n\t    enumerable: true\n\t  }\n\t});\n\t\n\t// Allows for both notational conventions of moving the head or moving the tape\n\tfunction move(tape, direction) {\n\t  switch (direction) {\n\t    case MoveHead.right: tape.headRight(); break;\n\t    case MoveHead.left:  tape.headLeft();  break;\n\t    default: throw new TypeError('not a valid tape movement: ' + String(direction));\n\t  }\n\t}\n\tvar MoveHead = Object.freeze({\n\t  left:  {toString: function () { return 'L'; } },\n\t  right: {toString: function () { return 'R'; } }\n\t});\n\tvar MoveTape = Object.freeze({left: MoveHead.right, right: MoveHead.left});\n\t\n\texports.MoveHead = MoveHead;\n\texports.MoveTape = MoveTape;\n\texports.TuringMachine = TuringMachine;\n\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Lightweight property assignment watching by overriding getters/setters.\n\t * Intended as a bridge between plain JS properties and other libraries.\n\t *\n\t * Inspired by https://gist.github.com/eligrey/384583, which works for\n\t * data properties only, this works for both data and accessor properties.\n\t *\n\t * 2015-11-21\n\t * @author Andy Li\n\t */\n\t\n\t/**\n\t * Watches a property for assignment by overriding it with a getter & setter\n\t * on top of the previous value or accessors.\n\t *\n\t * The handler can intercept assignments by returning a different value.\n\t * Watching an unwritable/unsettable property does nothing, but trying to watch\n\t * a non-existent or non-configurable property fails fast with TypeError.\n\t * @param  {!Object} thisArg The object that contains the property.\n\t * @param  {String}  prop    The name of the property to watch.\n\t * @param            handler The function to call when the property is\n\t *   assigned to. Important: this function intercepts assignment;\n\t *   its return value is set as the new value.\n\t * @throws {TypeError} if object is null or does not have the property\n\t * @throws {TypeError} if thisArg.prop is non-configurable\n\t * @return {?Object}         The previous property descriptor, or null if the\n\t *   property is not writable/settable.\n\t */\n\tfunction watch(thisArg, prop, handler) {\n\t  var desc = Object.getOwnPropertyDescriptor(thisArg, prop);\n\t  // check pre-conditions: existent, configurable, writable/settable\n\t  if (desc === undefined) {\n\t    throw new TypeError('Cannot watch nonexistent property \\''+prop+'\\'');\n\t  } else if (!desc.configurable) {\n\t    throw new TypeError('Cannot watch non-configurable property \\''+prop+'\\'');\n\t  } else if (!desc.writable && desc.set === undefined) {\n\t    return; // no-op since property can't change without reconfiguration\n\t  }\n\t\n\t  var accessors = (function () {\n\t    if (desc.set) {\n\t      // case: .get/.set\n\t      return {\n\t        get: desc.get,\n\t        set: function (newval) {\n\t          return desc.set.call(thisArg, handler.call(thisArg, prop, thisArg[prop], newval));\n\t        }\n\t      };\n\t    } else {\n\t      // case: .value\n\t      var val = desc.value;\n\t      return {\n\t        get: function () {\n\t          return val;\n\t        },\n\t        set: function (newval) {\n\t          return val = handler.call(thisArg, prop, val, newval);\n\t        }\n\t      };\n\t    }\n\t  })();\n\t  Object.defineProperty(thisArg, prop, accessors);\n\t\n\t  return desc;\n\t}\n\t\n\t/**\n\t * {@link watch} that, if successful, also calls the handler once with\n\t *   the current value (by setting it).\n\t * @see watch\n\t */\n\tfunction watchInit(thisArg, prop, handler) {\n\t  var value = thisArg[prop];\n\t  var desc = watch(thisArg, prop, handler);\n\t  if (desc) { thisArg[prop] = value; }\n\t  return desc;\n\t}\n\t\n\tif (true) {\n\t  exports.watch = watch;\n\t  exports.watchInit = watchInit;\n\t}\n\n\n/***/ },\n\n/***/ 19:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"state-diagram/StateViz.css\";\n\n/***/ },\n\n/***/ 20:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"tape/tape.css\";\n\n/***/ },\n\n/***/ 46:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _ = __webpack_require__(5);\n\t\n\t\n\t/* Interface\n\t  type TransitionTable = {\n\t    [state: string]: ?{\n\t      [symbol: string]: Instruction\n\t    }\n\t  };\n\t  type Instruction = { state?: string, symbol?: string };\n\t\n\t  type DiagramGraph = {\n\t    [state: string]: {\n\t      label: string,\n\t      transitions: ?{\n\t        [symbol: string]: {\n\t          instruction: Instruction,\n\t          edge: LayoutEdge\n\t        }\n\t      }\n\t    }\n\t  };\n\t  type LayoutEdge = { source: Object, target: Object, labels: [string] }\n\t */\n\t\n\t/**\n\t * Use a transition table to derive the graph (vertices & edges) for a D3 diagram.\n\t * Edges with the same source and target are combined.\n\t * NB. In addition to single symbols, comma-separated symbols are supported.\n\t * e.g. symbol string '0,1,,,I' -> symbols [0,1,',','I'].\n\t */\n\t// TransitionTable -> DiagramGraph\n\tfunction deriveGraph(table) {\n\t  // We need two passes, since edges may point at vertices yet to be created.\n\t  // 1. Create all the vertices.\n\t  var graph = _.mapValues(table, function (transitions, state) {\n\t    return {\n\t      label: state,\n\t      transitions: transitions\n\t    };\n\t  });\n\t  // 2. Create the edges, which can now point at any vertex object.\n\t  var allEdges = [];\n\t  _.forEach(graph, function (vertex, state) {\n\t\n\t    vertex.transitions = vertex.transitions && (function () {\n\t      var stateTransitions = {};\n\t\n\t      // Combine edges with the same source and target\n\t      var cache = {};\n\t      function edgeTo(target, label) {\n\t        var edge = cache[target] ||\n\t          _.tap(cache[target] = {\n\t            source: vertex,\n\t            target: graph[target],\n\t            labels: []\n\t          }, allEdges.push.bind(allEdges));\n\t        edge.labels.push(label);\n\t        return edge;\n\t      }\n\t      // Create symbol -> instruction object map\n\t      _.forEach(vertex.transitions, function (instruct, symbolKey) {\n\t        // Handle comma-separated symbols.\n\t        // Recreate array by splitting on ','. Treat 2 consecutive ',' as , ','.\n\t        var symbols = symbolKey.split(',').reduce(function (acc, x) {\n\t          if (x === '' && acc[acc.length-1] === '') {\n\t            acc[acc.length-1] = ',';\n\t          } else {\n\t            acc.push(x);\n\t          }\n\t          return acc;\n\t        }, []);\n\t        var target = instruct.state != null ? instruct.state : state;\n\t        var edge = edgeTo(target, labelFor(symbols, instruct));\n\t\n\t        symbols.forEach(function (symbol) {\n\t          stateTransitions[symbol] = {\n\t            // Normalize for execution, but display the less-cluttered original.\n\t            instruction: normalize(state, symbol, instruct),\n\t            edge: edge\n\t          };\n\t        });\n\t      });\n\t\n\t      return stateTransitions;\n\t    }());\n\t\n\t  });\n\t\n\t  return {graph: graph, edges: allEdges};\n\t}\n\t\n\t// Normalize an instruction to include an explicit state and symbol.\n\t// e.g. {symbol: '1'} normalizes to {state: 'q0', symbol: '1'} when in state q0.\n\tfunction normalize(state, symbol, instruction) {\n\t  return _.defaults({}, instruction, {state: state, symbol: symbol});\n\t}\n\t\n\t// TODO: allow custom function for showing spaces?\n\tfunction labelFor(symbols, action) {\n\t  var rightSide = ((action.symbol == null) ? '' : (visibleSpace(String(action.symbol)) + ','))\n\t    + String(action.move);\n\t  return symbols.map(visibleSpace).join(',') + '→' + rightSide;\n\t}\n\t\n\t// replace ' ' with '␣'.\n\tfunction visibleSpace(c) {\n\t  return (c === ' ') ? '␣' : c;\n\t}\n\t\n\t\n\t/**\n\t * Aids rendering and animating a transition table in D3.\n\t *\n\t * • Generates the vertices and edges (\"nodes\" and \"links\") for a D3 diagram.\n\t * • Provides mapping of each state to its vertex and each transition to its edge.\n\t * @param {TransitionTable} table\n\t */\n\tfunction StateGraph(table) {\n\t  var derived = deriveGraph(table);\n\t  Object.defineProperties(this, {\n\t    __graph: { value: derived.graph },\n\t    __edges: { value: derived.edges }\n\t  });\n\t}\n\t\n\t/**\n\t * D3 layout \"nodes\".\n\t */\n\t// StateGraph.prototype.getVertices = function () {\n\t//   return _.values(this.__graph);\n\t// };\n\t\n\t/**\n\t * Returns the mapping from states to vertices (D3 layout \"nodes\").\n\t * @return { {[state: string]: Object} }\n\t */\n\tStateGraph.prototype.getVertexMap = function () {\n\t  return this.__graph;\n\t};\n\t\n\t/**\n\t * D3 layout \"links\".\n\t */\n\tStateGraph.prototype.getEdges = function () {\n\t  return this.__edges;\n\t};\n\t\n\t/**\n\t * Look up a state's corresponding D3 \"node\".\n\t */\n\tStateGraph.prototype.getVertex = function (state) {\n\t  return this.__graph[state];\n\t};\n\t\n\t// TODO: incorporate multi-symbol left side matching\n\tStateGraph.prototype.getInstructionAndEdge = function (state, symbol) {\n\t  var vertex = this.__graph[state];\n\t  if (vertex === undefined) {\n\t    throw new Error('not a valid state: ' + String(state));\n\t  }\n\t\n\t  return vertex.transitions && vertex.transitions[symbol];\n\t};\n\t\n\t\n\tmodule.exports = StateGraph;\n\n\n/***/ },\n\n/***/ 47:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar d3 = __webpack_require__(2);\n\tvar _ = __webpack_require__(1);\n\tvar assign = __webpack_require__(5).assign; // need mutable assign()\n\t\n\t// *** Arrays as vectors ***\n\t\n\t// Add vectors.\n\t// Note: dimensions are not checked. Missing dimensions become NaN.\n\tfunction addV(array1, array2) {\n\t  return array1.map(function (x, i) { return x + array2[i]; });\n\t}\n\t\n\tfunction negateV(array) {\n\t  return array.map(function (x) { return -x; });\n\t}\n\t\n\tfunction subtractV(array1, array2) {\n\t  return addV(array1, negateV(array2));\n\t}\n\t\n\t// Scale the vector by a scalar.\n\tfunction multiplyV(array, scalar) {\n\t  return array.map(function (x) { return scalar*x; });\n\t}\n\t\n\t// Vector norm, squared\n\tfunction normSqV(array) {\n\t  function sq(x) { return x*x; }\n\t  function add(x, y) { return x + y; }\n\t  return array.map(sq).reduce(add, 0);\n\t}\n\t\n\t// Vector norm\n\tfunction normV(array) { return Math.sqrt(normSqV(array)); }\n\t\n\t// Return a copy of the vector rescaled as a unit vector (norm = 1).\n\tfunction unitV(array) {\n\t  var n = normV(array);\n\t  return array.map(function (x) { return x / n; });\n\t}\n\t\n\t// *** 2D Vectors ***\n\tfunction angleV(array) {\n\t  var x = array[0], y = array[1];\n\t  return Math.atan2(y, x);\n\t}\n\t\n\tfunction vectorFromLengthAngle(length, angle) {\n\t  return [Math.cos(angle) * length, Math.sin(angle) * length];\n\t}\n\t\n\t// *** Utilities ***\n\t\n\t// Count the directed edges that start at a given node and end at another.\n\t// Important: each node must have a unique .index property.\n\t// Example usage:\n\t// var counts = new EdgeCounter(edges);\n\t// var edgesFrom2To5 = counts.numEdgesFromTo(2,5);\n\t// var edgesFrom5to2 = counts.numEdgesFromTo(5,2);\n\tfunction EdgeCounter(edges) {\n\t  edges.forEach(function (e) {\n\t    var key = e.source.index +','+ e.target.index;\n\t    this[key] = (this[key] || 0) + 1;\n\t  }, this);\n\t}\n\t\n\tEdgeCounter.prototype.numEdgesFromTo = function (src, target) {\n\t  return this[String(src)+','+String(target)] || 0;\n\t};\n\t\n\tvar EdgeShape = Object.freeze({\n\t  loop: {},     // self-loop: a->a\n\t  arc: {},      // curved arc: a->b when b->a exists\n\t  straight: {}  // straight edge: a->b when b->a does not exist\n\t});\n\t\n\tEdgeCounter.prototype.shapeForEdge = function (e) {\n\t  if (e.target.index === e.source.index) {\n\t    return EdgeShape.loop;\n\t  } else if (this.numEdgesFromTo(e.target.index, e.source.index)) {\n\t    // has returning edge => arc\n\t    return EdgeShape.arc;\n\t  } else {\n\t    return EdgeShape.straight;\n\t  }\n\t};\n\t\n\t// create a function that will compute an edge's SVG 'd' attribute.\n\tfunction edgePathFor(nodeRadius, shape, d) {\n\t  // case: self-loop\n\t  var loopEndOffset, loopArc;\n\t  if (shape === EdgeShape.loop) {\n\t    // start at the top (90°), end slightly above the right (15°)\n\t    loopEndOffset = vectorFromLengthAngle(nodeRadius, -15 * Math.PI/180);\n\t    loopArc = ' a 19,27 45 1,1 ' + loopEndOffset[0] + ',' + (loopEndOffset[1]+nodeRadius);\n\t    return function () {\n\t      var x1 = d.source.x,\n\t          y1 = d.source.y;\n\t      return 'M ' + x1 + ',' + (y1-nodeRadius) + loopArc;\n\t    };\n\t  }\n\t  // case: between nodes\n\t  if (shape === EdgeShape.arc) {\n\t    // sub-case: arc\n\t    return function () {\n\t      // note: p1 & p2 have to be delayed, to access x/y at the time of the call\n\t      var p1 = [d.source.x, d.source.y];\n\t      var p2 = [d.target.x, d.target.y];\n\t      var offset = subtractV(p2, p1);\n\t      var radius = 6/5*normV(offset);\n\t      // Note: SVG's y-axis is flipped, so vector angles are negative\n\t      // relative to standard coordinates (as used in Math.atan2).\n\t      // Proof: angle(r <cos ϴ, -sin ϴ>) = angle(r <cos -ϴ, sin -ϴ>) = -ϴ.\n\t      var angle = angleV(offset);\n\t      var sep = -Math.PI/2/2; // 90° separation, half on each side\n\t      var source = addV(p1, vectorFromLengthAngle(nodeRadius, angle+sep));\n\t      var target = addV(p2, vectorFromLengthAngle(nodeRadius, angle+Math.PI-sep));\n\t      // TODO: consider http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands\n\t      return (p1[0] <= p2[0])\n\t        ? 'M '+source[0]+' '+source[1]+' A '+radius+' '+radius+' 0 0,1 '+target[0]+' '+target[1]\n\t        : 'M '+target[0]+' '+target[1]+' A '+radius+' '+radius+' 0 0,0 '+source[0]+' '+source[1];\n\t    };\n\t  } else if (shape === EdgeShape.straight) {\n\t    return function () {\n\t      // sub-case: straight line\n\t      var p1 = [d.source.x, d.source.y];\n\t      var p2 = [d.target.x, d.target.y];\n\t      var offset = subtractV(p2, p1);\n\t      // avoid spurious errors when bounding causes node centers to coincide\n\t      if (offset[0] === 0 && offset[1] === 0) { return null; }\n\t\n\t      var target = subtractV(p2, multiplyV(unitV(offset), nodeRadius));\n\t      return 'M '+p1[0]+' '+p1[1]+' L '+ target[0] +' '+ target[1];\n\t    };\n\t  }\n\t}\n\t\n\tfunction rectCenter(svgrect) {\n\t  return {x: svgrect.x + svgrect.width/2,\n\t          y: svgrect.y + svgrect.height/2};\n\t}\n\t\n\tfunction identity(x) { return x; }\n\tfunction noop() {}\n\t\n\tfunction limitRange(min, max, value) {\n\t  return Math.max(min, Math.min(value, max));\n\t}\n\t\n\t// function rotateAroundCenter(angle, svglocatable) {\n\t//   var c = rectCenter(svglocatable.getBBox());\n\t//   svglocatable.setAttribute('transform', 'rotate('+angle+' '+c.x+' '+c.y+')');\n\t// }\n\t\n\t// *** D3 diagram ***\n\t__webpack_require__(19);\n\t\n\t// type LayoutNode = {label: string};\n\t// type StateMap = {[state: string]: LayoutNode};\n\t\n\t/**\n\t * Create a state diagram inside an SVG.\n\t * Each vertex/edge (node/link) object is also annotated with @.domNode@\n\t * corresponding to its SVG element.\n\t *\n\t * Note: currently, element IDs (e.g. for textPath) will collide if multiple\n\t * diagrams are on the same document (HTML page).\n\t * @param  {D3Selection}      svg           SVG to take over and use.\n\t * @param  {[LayoutNode] | StateMap} nodes  Parameter to D3's force.nodes.\n\t *   Important: passing a StateMap is recommended when using setPositionTable.\n\t *   Passing an array will key the state nodes by array index.\n\t * @param  {[LayoutEdge]}     linkArray     Parameter to D3's force.links.\n\t */\n\tfunction StateViz(svg, nodes, linkArray) {\n\t  /* References:\n\t    [Sticky Force Layout](http://bl.ocks.org/mbostock/3750558) demonstrates\n\t    drag to position and double-click to release.\n\t\n\t    [Graph with labeled edges](http://bl.ocks.org/jhb/5955887) demonstrates\n\t    arrow edges with auto-rotated labels.\n\t  */\n\t\n\t  /* eslint-disable no-invalid-this */ // eslint is not familiar with D3\n\t  var w = 800;\n\t  var h = 500;\n\t  var linkDistance = 140;\n\t  var nodeRadius = 20;\n\t\n\t  var colors = d3.scale.category10();\n\t\n\t  svg.attr({\n\t    'width': '100%',\n\t    'viewBox': [0, 0, w, h].join(' '),\n\t    'version': '1.1',\n\t    ':xmlns': 'http://www.w3.org/2000/svg',\n\t    ':xmlns:xlink': 'http://www.w3.org/1999/xlink'\n\t  });\n\t\n\t  // Force Layout\n\t\n\t  // drag event handlers\n\t  function dragstart(d) {\n\t    d.fixed = true;\n\t    svg.transition()\n\t      .style('box-shadow', 'inset 0 0 1px gold');\n\t  }\n\t  function dragend() {\n\t    svg.transition()\n\t      .style('box-shadow', null);\n\t  }\n\t  function releasenode(d) {\n\t    d.fixed = false;\n\t    force.resume();\n\t  }\n\t\n\t  // set up force layout\n\t  var nodeArray = nodes instanceof Array ? nodes : _.values(nodes);\n\t  this.__stateMap = nodes;\n\t\n\t  var force = d3.layout.force()\n\t      .nodes(nodeArray)\n\t      .links(linkArray)\n\t      .size([w,h])\n\t      .linkDistance([linkDistance])\n\t      .charge([-500])\n\t      .theta(0.1)\n\t      .gravity(0.05)\n\t      .start();\n\t\n\t  var drag = force.drag()\n\t      .on('dragstart', dragstart)\n\t      .on('dragend', dragend);\n\t\n\t  // Edges\n\t  var edgeCounter = new EdgeCounter(linkArray);\n\t\n\t  var edgeselection = svg.selectAll('.edgepath')\n\t    .data(linkArray)\n\t    .enter();\n\t\n\t  var edgegroups = edgeselection.append('g');\n\t\n\t  var labelAbove = function (d, i) { return String(-1.1*(i+1)) + 'em'; };\n\t  var labelBelow = function (d, i) { return String(0.6+ 1.1*(i+1)) + 'em'; };\n\t\n\t  edgegroups.each(function (edgeD, edgeIndex) {\n\t    var group = d3.select(this);\n\t    var edgepath = group\n\t      .append('path')\n\t        .attr({'class': 'edgepath',\n\t               'id': 'edgepath'+edgeIndex })\n\t        .each(function (d) { d.domNode = this; });\n\t\n\t    var labels = group.selectAll('.edgelabel')\n\t      .data(edgeD.labels).enter()\n\t      .append('text')\n\t        .attr('class', 'edgelabel');\n\t    labels.append('textPath')\n\t        .attr('xlink:href', function () { return '#edgepath'+edgeIndex; })\n\t        .attr('startOffset', '50%')\n\t        .text(identity);\n\t    /* To reduce JS computation, label positioning varies by edge shape:\n\t        * Straight edges can use a fixed 'dy' value.\n\t        * Loops cannot use 'dy' since it increases letter spacing\n\t          as labels get farther from the path. Instead, since a loop's shape\n\t          is fixed, it allows a fixed translate 'transform'.\n\t        * Arcs are bent and their shape is not fixed, so neither 'dy'\n\t          nor 'transform' can be constant.\n\t          Fortunately the curvature is slight enough that a fixed 'dy'\n\t          looks good enough without resorting to dynamic translations.\n\t    */\n\t    var shape = edgeCounter.shapeForEdge(edgeD);\n\t    edgeD.getPath = edgePathFor(nodeRadius, shape, edgeD);\n\t    switch (shape) {\n\t      case EdgeShape.straight:\n\t        labels.attr('dy', labelAbove);\n\t        edgeD.refreshLabels = function () {\n\t          // flip edge labels that are upside-down\n\t          labels.attr('transform', function () {\n\t            if (edgeD.target.x < edgeD.source.x) {\n\t              var c = rectCenter(this.getBBox());\n\t              return 'rotate(180 '+c.x+' '+c.y+')';\n\t            } else {\n\t              return null;\n\t            }\n\t          });\n\t        };\n\t        break;\n\t      case EdgeShape.arc:\n\t        var isFlipped;\n\t        edgeD.refreshLabels = function () {\n\t          var shouldFlip = edgeD.target.x < edgeD.source.x;\n\t          if (shouldFlip !== isFlipped) {\n\t            edgepath.classed('reversed-arc', shouldFlip);\n\t            labels.attr('dy', shouldFlip ? labelBelow : labelAbove);\n\t            isFlipped = shouldFlip;\n\t          }\n\t        };\n\t        break;\n\t      case EdgeShape.loop:\n\t        labels.attr('transform', function (d, i) {\n\t          return 'translate(' + String(8*(i+1)) + ' ' + String(-8*(i+1)) + ')';\n\t        });\n\t        edgeD.refreshLabels = noop;\n\t        break;\n\t    }\n\t  });\n\t  var edgepaths = edgegroups.selectAll('.edgepath');\n\t\n\t  // Nodes\n\t  // note: nodes are added after edges so as to paint over excess edge lines\n\t  var nodeSelection = svg.selectAll('.node')\n\t    .data(nodeArray)\n\t    .enter();\n\t\n\t  var nodecircles = nodeSelection\n\t    .append('circle')\n\t      .attr('class', 'node')\n\t      .attr('r', nodeRadius)\n\t      .style('fill', function (d,i) { return colors(i); })\n\t      .each(function (d) { d.domNode = this; })\n\t      .on('dblclick', releasenode)\n\t      .call(drag);\n\t\n\t  var nodelabels = nodeSelection\n\t   .append('text')\n\t     .attr('class', 'nodelabel')\n\t     .attr('dy', '0.25em') /* dy doesn't work in CSS */\n\t     .text(function (d) { return d.label; });\n\t\n\t  // Arrowheads\n\t  var svgdefs = svg.append('defs');\n\t  svgdefs.selectAll('marker')\n\t      .data(['arrowhead', 'active-arrowhead', 'reversed-arrowhead', 'reversed-active-arrowhead'])\n\t    .enter().append('marker')\n\t      .attr({'id': function (d) { return d; },\n\t             'viewBox':'0 -5 10 10',\n\t             'refX': function (d) {\n\t               return (d.lastIndexOf('reversed-', 0) === 0) ? 0 : 10;\n\t             },\n\t             'orient':'auto',\n\t             'markerWidth':10,\n\t             'markerHeight':10\n\t            })\n\t    .append('path')\n\t      .attr('d', 'M 0 -5 L 10 0 L 0 5 Z')\n\t      .attr('transform', function (d) {\n\t        return (d.lastIndexOf('reversed-', 0) === 0) ? 'rotate(180 5 0)' : null;\n\t      });\n\t\n\t  // Force Layout Update\n\t  force.on('tick', function () {\n\t    // Keep coordinates in bounds. http://bl.ocks.org/mbostock/1129492\n\t    // NB. Bounding can cause node centers to coincide, especially at corners.\n\t    nodecircles.attr({cx: function (d) { return d.x = limitRange(nodeRadius, w - nodeRadius, d.x); },\n\t                      cy: function (d) { return d.y = limitRange(nodeRadius, h - nodeRadius, d.y); }\n\t    });\n\t\n\t    nodelabels.attr('x', function (d) { return d.x; })\n\t              .attr('y', function (d) { return d.y; });\n\t\n\t    edgepaths.attr('d', function (d) { return d.getPath(); });\n\t\n\t    edgegroups.each(function (d) { d.refreshLabels(); });\n\t\n\t    // Conserve CPU when layout is fully fixed\n\t    if (nodeArray.every(function (d) { return d.fixed; })) {\n\t      force.stop();\n\t    }\n\t  });\n\t  this.force = force;\n\t  /* eslint-enable no-invalid-this */\n\t}\n\t\n\t// Positioning\n\t\n\t// {[key: State]: Node} -> PositionTable\n\tvar getPositionTable = _.mapValues(_.pick(['x', 'y', 'px', 'py', 'fixed']));\n\t\n\t// Tag nodes w/ positions. Mutates the node map.\n\t// PositionTable -> {[key: State]: Node} -> void\n\tfunction setPositionTable(posTable, stateMap) {\n\t  _.forEach(function (node, state) {\n\t    var position = posTable[state];\n\t    if (position !== undefined) {\n\t      assign(node, position);\n\t    }\n\t  }, stateMap);\n\t}\n\t\n\tObject.defineProperty(StateViz.prototype, 'positionTable', {\n\t  get: function () { return getPositionTable(this.__stateMap); },\n\t  set: function (posTable) {\n\t    setPositionTable(posTable, this.__stateMap);\n\t    // ensure that a cooled layout will update\n\t    this.force.resume();\n\t  }\n\t});\n\t\n\t\n\tmodule.exports = StateViz;\n\n\n/***/ },\n\n/***/ 48:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar _ = __webpack_require__(1);\n\t\n\t// Bidirectional infinite tape\n\tfunction Tape(blank, input) {\n\t  Object.defineProperty(this, 'blank', {\n\t    value: blank,\n\t    writable: false,\n\t    enumerable: true\n\t  });\n\t  // zipper data structure\n\t  // INVARIANTS: tape.before can be empty, tape.after must be nonempty.\n\t  // before: cells before the head (in order; left to right).\n\t  // after:  cells after and including the head (in reverse; right to left).\n\t  this.tape = {\n\t    before: [],\n\t    after: (input == null || input.length == 0) ? [blank] : input.slice().reverse(),\n\t    toString: function () {\n\t      return this.before.join('') + '🔎' + this.after.slice().reverse().join('');\n\t    }\n\t  };\n\t}\n\t\n\t// Read the value at the tape head.\n\tTape.prototype.read = function () {\n\t  return _.last(this.tape.after);\n\t};\n\tTape.prototype.write = function (symbol) {\n\t  this.tape.after[this.tape.after.length - 1] = symbol;\n\t};\n\t\n\tTape.prototype.headRight = function () {\n\t  var before = this.tape.before,\n\t      after = this.tape.after;\n\t  before.push(after.pop());\n\t  if (_.isEmpty(after)) {\n\t    after.push(this.blank);\n\t  }\n\t};\n\tTape.prototype.headLeft = function () {\n\t  var before = this.tape.before,\n\t      after = this.tape.after;\n\t  if (_.isEmpty(before)) {\n\t    before.push(this.blank);\n\t  }\n\t  after.push(before.pop());\n\t};\n\t\n\tTape.prototype.toString = function () {\n\t  return this.tape.toString();\n\t};\n\t\n\t// for tape visualization. not part of TM definition.\n\t// Read the value at an offset from the tape head.\n\t// 0 is the tape head. + is to the right, - to the left.\n\tTape.prototype.readOffset = function (i) {\n\t  var tape = this.tape;\n\t  if (i >= 0) {\n\t    // right side: offset [0..length-1] ↦ array index [length-1..0]\n\t    return (i <= tape.after.length - 1) ? tape.after[tape.after.length - 1 - i] : this.blank;\n\t  } else {\n\t    // left side: offset [-1..-length] ↦ array index [length-1..0]\n\t    return (i >= -tape.before.length) ? tape.before[tape.before.length + i] : this.blank;\n\t  }\n\t};\n\t\n\t// for tape visualization.\n\t// Read the values from an offset range (inclusive of start and end).\n\tTape.prototype.readRange = function (start, end) {\n\t  return _.range(start, end+1).map(function (i) {\n\t    return this.readOffset(i);\n\t  }, this);\n\t};\n\t\n\tmodule.exports = Tape;\n\n\n/***/ },\n\n/***/ 49:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar Tape = __webpack_require__(48),\n\t    d3   = __webpack_require__(2);\n\t__webpack_require__(20);\n\t\n\tvar cellWidth = 50;\n\tvar cellHeight = 50;\n\t\n\tfunction initTapeCells(selection) {\n\t  selection.attr('class', 'tape-cell');\n\t  selection.append('rect')\n\t      // the box outline is purely visual, so remove its data binding\n\t      .datum(null)\n\t      .attr({'width': cellWidth,\n\t             'height': cellHeight});\n\t  selection.append('text')\n\t      .text(function (d) { return d; })\n\t      .attr({'x': cellWidth/2, 'y': cellHeight/2 + 8});\n\t  return selection;\n\t}\n\t\n\tfunction positionCells(selection, offset) {\n\t  offset = (offset == null) ? 0 : offset;\n\t  selection.attr('transform', function (d, i) {\n\t    return 'translate(' + (-cellWidth+10 + cellWidth*(i+offset)) + ')';\n\t  });\n\t  return selection;\n\t}\n\t\n\tfunction repositionWrapper(wrapper) {\n\t  wrapper.attr('transform', 'translate(0 10)')\n\t    .transition()\n\t      .duration(0)\n\t    .select('.exiting')\n\t      .remove();\n\t}\n\t\n\t// Tape visualization centered around the tape head.\n\tfunction TapeViz(svg, lookaround, blank, input) {\n\t  Tape.call(this, blank, input);\n\t\n\t  Object.defineProperty(this, 'lookaround', {\n\t    value: lookaround,\n\t    writable: false,\n\t    enumerable: true\n\t  });\n\t  Object.defineProperty(this, 'domNode', {\n\t    value: svg,\n\t    writable: false,\n\t    enumerable: true\n\t  });\n\t\n\t  // TODO: factor out hard-coded constants\n\t  // width is before + head + after, trimming 2 off to show cut-off tape ends\n\t  var width  = cellWidth * (lookaround+1+lookaround-2) + 2*10;\n\t  var height = cellHeight + 2*10;\n\t  svg.attr({\n\t    'width': '95%',\n\t    'viewBox': [0, 0, width, height].join(' ')\n\t  });\n\t\n\t  this.wrapper = svg.append('g')\n\t      .attr('class', 'wrapper')\n\t      .call(repositionWrapper);\n\t\n\t  svg.append('rect')\n\t      .attr({'id': 'tape-head',\n\t             'width': (1+1/5) * cellWidth,\n\t             'height': (1+1/5) * cellHeight,\n\t             'x': -cellWidth+10/2 + cellWidth*lookaround,\n\t             'y': 10/2\n\t           });\n\t\n\t  this.wrapper.selectAll('.tape-cell')\n\t      .data(this.readRange(-lookaround, lookaround))\n\t    .enter()\n\t    .append('g')\n\t      .call(initTapeCells)\n\t      .call(positionCells)\n\t  ;\n\t}\n\t\n\tTapeViz.prototype = Object.create(Tape.prototype);\n\tTapeViz.prototype.constructor = TapeViz;\n\t\n\t// TODO: concurrently fade out old value and fade in new value\n\t// TODO: chain headLeft/Right to wait for write()?\n\tTapeViz.prototype.write = function (symbol) {\n\t  // don't animate if symbol stays the same\n\t  if (Tape.prototype.read.call(this) === symbol) {\n\t    return;\n\t  }\n\t  Tape.prototype.write.call(this, symbol);\n\t\n\t  // remove leftover .exiting in case animation was interrupted\n\t  this.wrapper.selectAll('.exiting').remove();\n\t\n\t  // TODO: replace with .selectAll('.tape-cell:not(.exiting)'),\n\t  // to avoid need to remove .exiting ?\n\t  d3.select(this.wrapper[0][0].childNodes[this.lookaround])\n\t      .datum(symbol)\n\t    .select('text')\n\t      .attr('fill-opacity', '1')\n\t      .attr('stroke-opacity', '1')\n\t    .transition()\n\t      .attr('fill-opacity', '0.4')\n\t      .attr('stroke-opacity', '0.1')\n\t    .transition()\n\t      .text(function (d) { return d; })\n\t      .attr('fill-opacity', '1')\n\t      .attr('stroke-opacity', '1')\n\t    .transition()\n\t      .duration(0)\n\t      .attr('fill-opacity', null)\n\t      .attr('stroke-opacity', null)\n\t    ;\n\t};\n\t\n\tfunction moveHead(wrapper, enter, exit, wOffset, cOffset) {\n\t  // add to one end\n\t  enter.call(initTapeCells);\n\t  // remove from the other end\n\t  exit.classed('exiting', true);\n\t  // translate cells forward, and the wrapper backwards\n\t  wrapper.selectAll('.tape-cell')\n\t      .call(positionCells, cOffset);\n\t  wrapper\n\t      .attr('transform', 'translate(' + (wOffset*cellWidth).toString() + ' 10)')\n\t    // animate wrapper returning to neutral position\n\t    .transition()\n\t      .call(repositionWrapper);\n\t}\n\t\n\tTapeViz.prototype.headRight = function () {\n\t  Tape.prototype.headRight.call(this);\n\t  // remove leftover .exiting in case animation was interrupted.\n\t  // Important: call-by-value evaluates the selection argument(s) of 'moveHead' before\n\t  // before entering the function, so exiting nodes have to be removed beforehand.\n\t  this.wrapper.selectAll('.exiting').remove();\n\t  moveHead(this.wrapper,\n\t    // add to right end\n\t    this.wrapper.append('g')\n\t        .datum(this.readOffset(this.lookaround)),\n\t    // remove from left end\n\t    this.wrapper.select('.tape-cell'),\n\t    1, -1);\n\t};\n\t\n\tTapeViz.prototype.headLeft = function () {\n\t  Tape.prototype.headLeft.call(this);\n\t  this.wrapper.selectAll('.exiting').remove();\n\t  moveHead(this.wrapper,\n\t    this.wrapper.insert('g', ':first-child')\n\t        .datum(this.readOffset(-this.lookaround)),\n\t    this.wrapper.select('.wrapper > .tape-cell:last-of-type'),\n\t    -1, 0);\n\t};\n\t\n\tmodule.exports = TapeViz;\n\n\n/***/ }\n\n/******/ });\n\n\n/** WEBPACK FOOTER **\n ** TMViz.bundle.js\n **/"," \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp_name_\"];\n \twindow[\"webpackJsonp_name_\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId])\n \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n \t\twhile(callbacks.length)\n \t\t\tcallbacks.shift().call(null, __webpack_require__);\n \t\tif(moreModules[0]) {\n \t\t\tinstalledModules[0] = 0;\n \t\t\treturn __webpack_require__(0);\n \t\t}\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// \"0\" means \"already loaded\"\n \t// Array means \"loading\", array contains callbacks\n \tvar installedChunks = {\n \t\t0:0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] === 0)\n \t\t\treturn callback.call(null, __webpack_require__);\n\n \t\t// an array means \"currently loading\".\n \t\tif(installedChunks[chunkId] !== undefined) {\n \t\t\tinstalledChunks[chunkId].push(callback);\n \t\t} else {\n \t\t\t// start chunk loading\n \t\t\tinstalledChunks[chunkId] = [callback];\n \t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\tvar script = document.createElement('script');\n \t\t\tscript.type = 'text/javascript';\n \t\t\tscript.charset = 'utf-8';\n \t\t\tscript.async = true;\n\n \t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({\"1\":\"main\"}[chunkId]||chunkId) + \".bundle.js\";\n \t\t\thead.appendChild(script);\n \t\t}\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/build/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 768404880fcd2ada2b47\n **/","module.exports = _;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"_\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = d3;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = lodash;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"lodash\"\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n/**\n * Turing machine visualization component.\n *\n * • Adds running and reset on top of the base Turing machine.\n * • Displays an animated state diagram and tape diagram.\n * Does not include UI elements for controlling the machine.\n *\n * @module\n */\n\nvar TuringMachine = require('./TuringMachine').TuringMachine,\n    TapeViz = require('./tape/TapeViz'),\n    StateGraph = require('./state-diagram/StateGraph'),\n    StateViz = require('./state-diagram/StateViz'),\n    watchInit = require('./watch').watchInit,\n    d3 = require('d3');\n\n/**\n * Create an animated transition function.\n * @param  {StateGraph} graph\n * @param  {LayoutEdge -> any} animationCallback\n * @return {(string, string) -> Instruction} Created transition function.\n */\nfunction animatedTransition(graph, animationCallback) {\n  return function (state, symbol) {\n    var tuple = graph.getInstructionAndEdge(state, symbol);\n    if (tuple == null) { return null; }\n\n    animationCallback(tuple.edge);\n    return tuple.instruction;\n  };\n}\n\n/**\n * Default edge animation callback.\n * @param  {{domNode: Node}} edge\n * @return {D3Transition} The animation. Use this for transition chaining.\n */\nfunction pulseEdge(edge) {\n  var edgepath = d3.select(edge.domNode);\n  // workaround for https://github.com/d3/d3-transition/issues/11\n  var normalColor = edgepath.style('stroke');\n  var pulseColor = d3.select('#active-arrowhead').style('stroke');\n  // TODO: animate arrowhead as well\n  return edgepath\n      .classed('active-edge', true)\n    .transition()\n      .style('stroke', pulseColor)\n      .style('stroke-width', '3')\n    .transition()\n      .style('stroke', normalColor)\n      .style('stroke-width', '1')\n    .transition()\n      .duration(0)\n      .each('start', /* @this edge */ function () {\n        d3.select(this).classed('active-edge', false);\n      })\n      .style('stroke', null)\n      .style('stroke-width', null);\n}\n\nfunction addTape(div, spec) {\n  return new TapeViz(div.append('svg').attr('class', 'tm-tape'), 9,\n    spec.blank, spec.input ? String(spec.input).split('') : []);\n}\n\n/**\n * Construct a new state and tape visualization inside a &lt;div&gt;.\n * @constructor\n * @param {HTMLDivElement} div        div to take over and use.\n * @param                  spec       machine specification\n * @param {PositionTable} [posTable]  position table for the state nodes\n */\nfunction TMViz(div, spec, posTable) {\n  div = d3.select(div);\n  var graph = new StateGraph(spec.table);\n  this.__stateviz = new StateViz(div.append('svg'),\n    graph.getVertexMap(),\n    graph.getEdges()\n  );\n  if (posTable != undefined) { this.positionTable = posTable; }\n\n  this.edgeAnimation = pulseEdge;\n  this.stepInterval = 100;\n\n  var self = this;\n  // We hook into the animation callback to know when to start the next step (when running).\n  function animateAndContinue(edge) {\n    var transition = self.edgeAnimation(edge);\n    if (self.isRunning) {\n      transition.transition().duration(self.stepInterval).each('end', function () {\n        // stop if machine was paused during the animation\n        if (self.isRunning) { self.step(); }\n      });\n    }\n  }\n\n  this.machine = new TuringMachine(\n    animatedTransition(graph, animateAndContinue),\n    spec.startState,\n    addTape(div, spec)\n  );\n  // intercept and animate when the state is set\n  watchInit(this.machine, 'state', function (prop, oldstate, newstate) {\n    d3.select(graph.getVertex(oldstate).domNode).classed('current-state', false);\n    d3.select(graph.getVertex(newstate).domNode).classed('current-state', true);\n    return newstate;\n  });\n\n  // Sidenote: each \"Step\" click evaluates the transition function once.\n  // Therefore, detecting halting always requires its own step (for consistency).\n  this.isHalted = false;\n\n  var isRunning = false;\n  /**\n   * Set isRunning to true to run the machine, and false to stop it.\n   */\n  Object.defineProperty(this, 'isRunning', {\n    configurable: true,\n    get: function () { return isRunning; },\n    set: function (value) {\n      if (isRunning !== value) {\n        isRunning = value;\n        if (isRunning) { this.step(); }\n      }\n    }\n  });\n\n  this.__parentDiv = div;\n  this.__spec = spec;\n}\n\n/**\n * Step the machine immediately and interrupt any animations.\n */\nTMViz.prototype.step = function () {\n  if (!this.machine.step()) {\n    this.isRunning = false;\n    this.isHalted = true;\n  }\n};\n\n/**\n * Reset the Turing machine to its starting configuration.\n */\nTMViz.prototype.reset = function () {\n  this.isRunning = false;\n  this.isHalted = false;\n  this.machine.state = this.__spec.startState;\n  this.machine.tape.domNode.remove();\n  this.machine.tape = addTape(this.__parentDiv, this.__spec);\n};\n\nObject.defineProperty(TMViz.prototype, 'positionTable', {\n  get: function ()  { return this.__stateviz.positionTable; },\n  set: function (posTable) { this.__stateviz.positionTable = posTable; }\n});\n\nmodule.exports = TMViz;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/TMViz.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n/**\n * Construct a Turing machine.\n * @param {(state, symbol) -> ?{state: state, symbol: symbol, move: direction}}\n *   transition\n *   A transition function that, given *only* the current state and symbol,\n *   returns an object with the following properties: symbol, move, and state.\n *   Returning null/undefined halts the machine (no transition defined).\n * @param {state} startState  The state to start in.\n * @param         tape        The tape to use.\n */\nfunction TuringMachine(transition, startState, tape) {\n  this.transition = transition;\n  this.state = startState;\n  this.tape = tape;\n}\n\nTuringMachine.prototype.toString = function () {\n  return String(this.state) + '\\n' + String(this.tape);\n};\n\n/**\n * Step to the next configuration according to the transition function.\n * @return {boolean} true if successful (the transition is defined),\n *   false otherwise (machine halted)\n */\nTuringMachine.prototype.step = function () {\n  var instruct = this.nextInstruction;\n  if (instruct == null) { return false; }\n\n  this.tape.write(instruct.symbol);\n  move(this.tape, instruct.move);\n  this.state = instruct.state;\n\n  return true;\n};\n\nObject.defineProperties(TuringMachine.prototype, {\n  nextInstruction: {\n    get: function () { return this.transition(this.state, this.tape.read()); },\n    enumerable: true\n  },\n  isHalted: {\n    get: function () { return this.nextInstruction == null; },\n    enumerable: true\n  }\n});\n\n// Allows for both notational conventions of moving the head or moving the tape\nfunction move(tape, direction) {\n  switch (direction) {\n    case MoveHead.right: tape.headRight(); break;\n    case MoveHead.left:  tape.headLeft();  break;\n    default: throw new TypeError('not a valid tape movement: ' + String(direction));\n  }\n}\nvar MoveHead = Object.freeze({\n  left:  {toString: function () { return 'L'; } },\n  right: {toString: function () { return 'R'; } }\n});\nvar MoveTape = Object.freeze({left: MoveHead.right, right: MoveHead.left});\n\nexports.MoveHead = MoveHead;\nexports.MoveTape = MoveTape;\nexports.TuringMachine = TuringMachine;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/TuringMachine.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n/**\n * Lightweight property assignment watching by overriding getters/setters.\n * Intended as a bridge between plain JS properties and other libraries.\n *\n * Inspired by https://gist.github.com/eligrey/384583, which works for\n * data properties only, this works for both data and accessor properties.\n *\n * 2015-11-21\n * @author Andy Li\n */\n\n/**\n * Watches a property for assignment by overriding it with a getter & setter\n * on top of the previous value or accessors.\n *\n * The handler can intercept assignments by returning a different value.\n * Watching an unwritable/unsettable property does nothing, but trying to watch\n * a non-existent or non-configurable property fails fast with TypeError.\n * @param  {!Object} thisArg The object that contains the property.\n * @param  {String}  prop    The name of the property to watch.\n * @param            handler The function to call when the property is\n *   assigned to. Important: this function intercepts assignment;\n *   its return value is set as the new value.\n * @throws {TypeError} if object is null or does not have the property\n * @throws {TypeError} if thisArg.prop is non-configurable\n * @return {?Object}         The previous property descriptor, or null if the\n *   property is not writable/settable.\n */\nfunction watch(thisArg, prop, handler) {\n  var desc = Object.getOwnPropertyDescriptor(thisArg, prop);\n  // check pre-conditions: existent, configurable, writable/settable\n  if (desc === undefined) {\n    throw new TypeError('Cannot watch nonexistent property \\''+prop+'\\'');\n  } else if (!desc.configurable) {\n    throw new TypeError('Cannot watch non-configurable property \\''+prop+'\\'');\n  } else if (!desc.writable && desc.set === undefined) {\n    return; // no-op since property can't change without reconfiguration\n  }\n\n  var accessors = (function () {\n    if (desc.set) {\n      // case: .get/.set\n      return {\n        get: desc.get,\n        set: function (newval) {\n          return desc.set.call(thisArg, handler.call(thisArg, prop, thisArg[prop], newval));\n        }\n      };\n    } else {\n      // case: .value\n      var val = desc.value;\n      return {\n        get: function () {\n          return val;\n        },\n        set: function (newval) {\n          return val = handler.call(thisArg, prop, val, newval);\n        }\n      };\n    }\n  })();\n  Object.defineProperty(thisArg, prop, accessors);\n\n  return desc;\n}\n\n/**\n * {@link watch} that, if successful, also calls the handler once with\n *   the current value (by setting it).\n * @see watch\n */\nfunction watchInit(thisArg, prop, handler) {\n  var value = thisArg[prop];\n  var desc = watch(thisArg, prop, handler);\n  if (desc) { thisArg[prop] = value; }\n  return desc;\n}\n\nif (typeof exports === 'object') {\n  exports.watch = watch;\n  exports.watchInit = watchInit;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/watch.js\n ** module id = 16\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"state-diagram/StateViz.css\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/state-diagram/StateViz.css\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"tape/tape.css\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tape/tape.css\n ** module id = 20\n ** module chunks = 0\n **/","'use strict';\n\nvar _ = require('lodash');\n\n\n/* Interface\n  type TransitionTable = {\n    [state: string]: ?{\n      [symbol: string]: Instruction\n    }\n  };\n  type Instruction = { state?: string, symbol?: string };\n\n  type DiagramGraph = {\n    [state: string]: {\n      label: string,\n      transitions: ?{\n        [symbol: string]: {\n          instruction: Instruction,\n          edge: LayoutEdge\n        }\n      }\n    }\n  };\n  type LayoutEdge = { source: Object, target: Object, labels: [string] }\n */\n\n/**\n * Use a transition table to derive the graph (vertices & edges) for a D3 diagram.\n * Edges with the same source and target are combined.\n * NB. In addition to single symbols, comma-separated symbols are supported.\n * e.g. symbol string '0,1,,,I' -> symbols [0,1,',','I'].\n */\n// TransitionTable -> DiagramGraph\nfunction deriveGraph(table) {\n  // We need two passes, since edges may point at vertices yet to be created.\n  // 1. Create all the vertices.\n  var graph = _.mapValues(table, function (transitions, state) {\n    return {\n      label: state,\n      transitions: transitions\n    };\n  });\n  // 2. Create the edges, which can now point at any vertex object.\n  var allEdges = [];\n  _.forEach(graph, function (vertex, state) {\n\n    vertex.transitions = vertex.transitions && (function () {\n      var stateTransitions = {};\n\n      // Combine edges with the same source and target\n      var cache = {};\n      function edgeTo(target, label) {\n        var edge = cache[target] ||\n          _.tap(cache[target] = {\n            source: vertex,\n            target: graph[target],\n            labels: []\n          }, allEdges.push.bind(allEdges));\n        edge.labels.push(label);\n        return edge;\n      }\n      // Create symbol -> instruction object map\n      _.forEach(vertex.transitions, function (instruct, symbolKey) {\n        // Handle comma-separated symbols.\n        // Recreate array by splitting on ','. Treat 2 consecutive ',' as , ','.\n        var symbols = symbolKey.split(',').reduce(function (acc, x) {\n          if (x === '' && acc[acc.length-1] === '') {\n            acc[acc.length-1] = ',';\n          } else {\n            acc.push(x);\n          }\n          return acc;\n        }, []);\n        var target = instruct.state != null ? instruct.state : state;\n        var edge = edgeTo(target, labelFor(symbols, instruct));\n\n        symbols.forEach(function (symbol) {\n          stateTransitions[symbol] = {\n            // Normalize for execution, but display the less-cluttered original.\n            instruction: normalize(state, symbol, instruct),\n            edge: edge\n          };\n        });\n      });\n\n      return stateTransitions;\n    }());\n\n  });\n\n  return {graph: graph, edges: allEdges};\n}\n\n// Normalize an instruction to include an explicit state and symbol.\n// e.g. {symbol: '1'} normalizes to {state: 'q0', symbol: '1'} when in state q0.\nfunction normalize(state, symbol, instruction) {\n  return _.defaults({}, instruction, {state: state, symbol: symbol});\n}\n\n// TODO: allow custom function for showing spaces?\nfunction labelFor(symbols, action) {\n  var rightSide = ((action.symbol == null) ? '' : (visibleSpace(String(action.symbol)) + ','))\n    + String(action.move);\n  return symbols.map(visibleSpace).join(',') + '→' + rightSide;\n}\n\n// replace ' ' with '␣'.\nfunction visibleSpace(c) {\n  return (c === ' ') ? '␣' : c;\n}\n\n\n/**\n * Aids rendering and animating a transition table in D3.\n *\n * • Generates the vertices and edges (\"nodes\" and \"links\") for a D3 diagram.\n * • Provides mapping of each state to its vertex and each transition to its edge.\n * @param {TransitionTable} table\n */\nfunction StateGraph(table) {\n  var derived = deriveGraph(table);\n  Object.defineProperties(this, {\n    __graph: { value: derived.graph },\n    __edges: { value: derived.edges }\n  });\n}\n\n/**\n * D3 layout \"nodes\".\n */\n// StateGraph.prototype.getVertices = function () {\n//   return _.values(this.__graph);\n// };\n\n/**\n * Returns the mapping from states to vertices (D3 layout \"nodes\").\n * @return { {[state: string]: Object} }\n */\nStateGraph.prototype.getVertexMap = function () {\n  return this.__graph;\n};\n\n/**\n * D3 layout \"links\".\n */\nStateGraph.prototype.getEdges = function () {\n  return this.__edges;\n};\n\n/**\n * Look up a state's corresponding D3 \"node\".\n */\nStateGraph.prototype.getVertex = function (state) {\n  return this.__graph[state];\n};\n\n// TODO: incorporate multi-symbol left side matching\nStateGraph.prototype.getInstructionAndEdge = function (state, symbol) {\n  var vertex = this.__graph[state];\n  if (vertex === undefined) {\n    throw new Error('not a valid state: ' + String(state));\n  }\n\n  return vertex.transitions && vertex.transitions[symbol];\n};\n\n\nmodule.exports = StateGraph;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/state-diagram/StateGraph.js\n ** module id = 46\n ** module chunks = 0\n **/","'use strict';\nvar d3 = require('d3');\nvar _ = require('lodash/fp');\nvar assign = require('lodash').assign; // need mutable assign()\n\n// *** Arrays as vectors ***\n\n// Add vectors.\n// Note: dimensions are not checked. Missing dimensions become NaN.\nfunction addV(array1, array2) {\n  return array1.map(function (x, i) { return x + array2[i]; });\n}\n\nfunction negateV(array) {\n  return array.map(function (x) { return -x; });\n}\n\nfunction subtractV(array1, array2) {\n  return addV(array1, negateV(array2));\n}\n\n// Scale the vector by a scalar.\nfunction multiplyV(array, scalar) {\n  return array.map(function (x) { return scalar*x; });\n}\n\n// Vector norm, squared\nfunction normSqV(array) {\n  function sq(x) { return x*x; }\n  function add(x, y) { return x + y; }\n  return array.map(sq).reduce(add, 0);\n}\n\n// Vector norm\nfunction normV(array) { return Math.sqrt(normSqV(array)); }\n\n// Return a copy of the vector rescaled as a unit vector (norm = 1).\nfunction unitV(array) {\n  var n = normV(array);\n  return array.map(function (x) { return x / n; });\n}\n\n// *** 2D Vectors ***\nfunction angleV(array) {\n  var x = array[0], y = array[1];\n  return Math.atan2(y, x);\n}\n\nfunction vectorFromLengthAngle(length, angle) {\n  return [Math.cos(angle) * length, Math.sin(angle) * length];\n}\n\n// *** Utilities ***\n\n// Count the directed edges that start at a given node and end at another.\n// Important: each node must have a unique .index property.\n// Example usage:\n// var counts = new EdgeCounter(edges);\n// var edgesFrom2To5 = counts.numEdgesFromTo(2,5);\n// var edgesFrom5to2 = counts.numEdgesFromTo(5,2);\nfunction EdgeCounter(edges) {\n  edges.forEach(function (e) {\n    var key = e.source.index +','+ e.target.index;\n    this[key] = (this[key] || 0) + 1;\n  }, this);\n}\n\nEdgeCounter.prototype.numEdgesFromTo = function (src, target) {\n  return this[String(src)+','+String(target)] || 0;\n};\n\nvar EdgeShape = Object.freeze({\n  loop: {},     // self-loop: a->a\n  arc: {},      // curved arc: a->b when b->a exists\n  straight: {}  // straight edge: a->b when b->a does not exist\n});\n\nEdgeCounter.prototype.shapeForEdge = function (e) {\n  if (e.target.index === e.source.index) {\n    return EdgeShape.loop;\n  } else if (this.numEdgesFromTo(e.target.index, e.source.index)) {\n    // has returning edge => arc\n    return EdgeShape.arc;\n  } else {\n    return EdgeShape.straight;\n  }\n};\n\n// create a function that will compute an edge's SVG 'd' attribute.\nfunction edgePathFor(nodeRadius, shape, d) {\n  // case: self-loop\n  var loopEndOffset, loopArc;\n  if (shape === EdgeShape.loop) {\n    // start at the top (90°), end slightly above the right (15°)\n    loopEndOffset = vectorFromLengthAngle(nodeRadius, -15 * Math.PI/180);\n    loopArc = ' a 19,27 45 1,1 ' + loopEndOffset[0] + ',' + (loopEndOffset[1]+nodeRadius);\n    return function () {\n      var x1 = d.source.x,\n          y1 = d.source.y;\n      return 'M ' + x1 + ',' + (y1-nodeRadius) + loopArc;\n    };\n  }\n  // case: between nodes\n  if (shape === EdgeShape.arc) {\n    // sub-case: arc\n    return function () {\n      // note: p1 & p2 have to be delayed, to access x/y at the time of the call\n      var p1 = [d.source.x, d.source.y];\n      var p2 = [d.target.x, d.target.y];\n      var offset = subtractV(p2, p1);\n      var radius = 6/5*normV(offset);\n      // Note: SVG's y-axis is flipped, so vector angles are negative\n      // relative to standard coordinates (as used in Math.atan2).\n      // Proof: angle(r <cos ϴ, -sin ϴ>) = angle(r <cos -ϴ, sin -ϴ>) = -ϴ.\n      var angle = angleV(offset);\n      var sep = -Math.PI/2/2; // 90° separation, half on each side\n      var source = addV(p1, vectorFromLengthAngle(nodeRadius, angle+sep));\n      var target = addV(p2, vectorFromLengthAngle(nodeRadius, angle+Math.PI-sep));\n      // TODO: consider http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands\n      return (p1[0] <= p2[0])\n        ? 'M '+source[0]+' '+source[1]+' A '+radius+' '+radius+' 0 0,1 '+target[0]+' '+target[1]\n        : 'M '+target[0]+' '+target[1]+' A '+radius+' '+radius+' 0 0,0 '+source[0]+' '+source[1];\n    };\n  } else if (shape === EdgeShape.straight) {\n    return function () {\n      // sub-case: straight line\n      var p1 = [d.source.x, d.source.y];\n      var p2 = [d.target.x, d.target.y];\n      var offset = subtractV(p2, p1);\n      // avoid spurious errors when bounding causes node centers to coincide\n      if (offset[0] === 0 && offset[1] === 0) { return null; }\n\n      var target = subtractV(p2, multiplyV(unitV(offset), nodeRadius));\n      return 'M '+p1[0]+' '+p1[1]+' L '+ target[0] +' '+ target[1];\n    };\n  }\n}\n\nfunction rectCenter(svgrect) {\n  return {x: svgrect.x + svgrect.width/2,\n          y: svgrect.y + svgrect.height/2};\n}\n\nfunction identity(x) { return x; }\nfunction noop() {}\n\nfunction limitRange(min, max, value) {\n  return Math.max(min, Math.min(value, max));\n}\n\n// function rotateAroundCenter(angle, svglocatable) {\n//   var c = rectCenter(svglocatable.getBBox());\n//   svglocatable.setAttribute('transform', 'rotate('+angle+' '+c.x+' '+c.y+')');\n// }\n\n// *** D3 diagram ***\nrequire('./StateViz.css');\n\n// type LayoutNode = {label: string};\n// type StateMap = {[state: string]: LayoutNode};\n\n/**\n * Create a state diagram inside an SVG.\n * Each vertex/edge (node/link) object is also annotated with @.domNode@\n * corresponding to its SVG element.\n *\n * Note: currently, element IDs (e.g. for textPath) will collide if multiple\n * diagrams are on the same document (HTML page).\n * @param  {D3Selection}      svg           SVG to take over and use.\n * @param  {[LayoutNode] | StateMap} nodes  Parameter to D3's force.nodes.\n *   Important: passing a StateMap is recommended when using setPositionTable.\n *   Passing an array will key the state nodes by array index.\n * @param  {[LayoutEdge]}     linkArray     Parameter to D3's force.links.\n */\nfunction StateViz(svg, nodes, linkArray) {\n  /* References:\n    [Sticky Force Layout](http://bl.ocks.org/mbostock/3750558) demonstrates\n    drag to position and double-click to release.\n\n    [Graph with labeled edges](http://bl.ocks.org/jhb/5955887) demonstrates\n    arrow edges with auto-rotated labels.\n  */\n\n  /* eslint-disable no-invalid-this */ // eslint is not familiar with D3\n  var w = 800;\n  var h = 500;\n  var linkDistance = 140;\n  var nodeRadius = 20;\n\n  var colors = d3.scale.category10();\n\n  svg.attr({\n    'width': '100%',\n    'viewBox': [0, 0, w, h].join(' '),\n    'version': '1.1',\n    ':xmlns': 'http://www.w3.org/2000/svg',\n    ':xmlns:xlink': 'http://www.w3.org/1999/xlink'\n  });\n\n  // Force Layout\n\n  // drag event handlers\n  function dragstart(d) {\n    d.fixed = true;\n    svg.transition()\n      .style('box-shadow', 'inset 0 0 1px gold');\n  }\n  function dragend() {\n    svg.transition()\n      .style('box-shadow', null);\n  }\n  function releasenode(d) {\n    d.fixed = false;\n    force.resume();\n  }\n\n  // set up force layout\n  var nodeArray = nodes instanceof Array ? nodes : _.values(nodes);\n  this.__stateMap = nodes;\n\n  var force = d3.layout.force()\n      .nodes(nodeArray)\n      .links(linkArray)\n      .size([w,h])\n      .linkDistance([linkDistance])\n      .charge([-500])\n      .theta(0.1)\n      .gravity(0.05)\n      .start();\n\n  var drag = force.drag()\n      .on('dragstart', dragstart)\n      .on('dragend', dragend);\n\n  // Edges\n  var edgeCounter = new EdgeCounter(linkArray);\n\n  var edgeselection = svg.selectAll('.edgepath')\n    .data(linkArray)\n    .enter();\n\n  var edgegroups = edgeselection.append('g');\n\n  var labelAbove = function (d, i) { return String(-1.1*(i+1)) + 'em'; };\n  var labelBelow = function (d, i) { return String(0.6+ 1.1*(i+1)) + 'em'; };\n\n  edgegroups.each(function (edgeD, edgeIndex) {\n    var group = d3.select(this);\n    var edgepath = group\n      .append('path')\n        .attr({'class': 'edgepath',\n               'id': 'edgepath'+edgeIndex })\n        .each(function (d) { d.domNode = this; });\n\n    var labels = group.selectAll('.edgelabel')\n      .data(edgeD.labels).enter()\n      .append('text')\n        .attr('class', 'edgelabel');\n    labels.append('textPath')\n        .attr('xlink:href', function () { return '#edgepath'+edgeIndex; })\n        .attr('startOffset', '50%')\n        .text(identity);\n    /* To reduce JS computation, label positioning varies by edge shape:\n        * Straight edges can use a fixed 'dy' value.\n        * Loops cannot use 'dy' since it increases letter spacing\n          as labels get farther from the path. Instead, since a loop's shape\n          is fixed, it allows a fixed translate 'transform'.\n        * Arcs are bent and their shape is not fixed, so neither 'dy'\n          nor 'transform' can be constant.\n          Fortunately the curvature is slight enough that a fixed 'dy'\n          looks good enough without resorting to dynamic translations.\n    */\n    var shape = edgeCounter.shapeForEdge(edgeD);\n    edgeD.getPath = edgePathFor(nodeRadius, shape, edgeD);\n    switch (shape) {\n      case EdgeShape.straight:\n        labels.attr('dy', labelAbove);\n        edgeD.refreshLabels = function () {\n          // flip edge labels that are upside-down\n          labels.attr('transform', function () {\n            if (edgeD.target.x < edgeD.source.x) {\n              var c = rectCenter(this.getBBox());\n              return 'rotate(180 '+c.x+' '+c.y+')';\n            } else {\n              return null;\n            }\n          });\n        };\n        break;\n      case EdgeShape.arc:\n        var isFlipped;\n        edgeD.refreshLabels = function () {\n          var shouldFlip = edgeD.target.x < edgeD.source.x;\n          if (shouldFlip !== isFlipped) {\n            edgepath.classed('reversed-arc', shouldFlip);\n            labels.attr('dy', shouldFlip ? labelBelow : labelAbove);\n            isFlipped = shouldFlip;\n          }\n        };\n        break;\n      case EdgeShape.loop:\n        labels.attr('transform', function (d, i) {\n          return 'translate(' + String(8*(i+1)) + ' ' + String(-8*(i+1)) + ')';\n        });\n        edgeD.refreshLabels = noop;\n        break;\n    }\n  });\n  var edgepaths = edgegroups.selectAll('.edgepath');\n\n  // Nodes\n  // note: nodes are added after edges so as to paint over excess edge lines\n  var nodeSelection = svg.selectAll('.node')\n    .data(nodeArray)\n    .enter();\n\n  var nodecircles = nodeSelection\n    .append('circle')\n      .attr('class', 'node')\n      .attr('r', nodeRadius)\n      .style('fill', function (d,i) { return colors(i); })\n      .each(function (d) { d.domNode = this; })\n      .on('dblclick', releasenode)\n      .call(drag);\n\n  var nodelabels = nodeSelection\n   .append('text')\n     .attr('class', 'nodelabel')\n     .attr('dy', '0.25em') /* dy doesn't work in CSS */\n     .text(function (d) { return d.label; });\n\n  // Arrowheads\n  var svgdefs = svg.append('defs');\n  svgdefs.selectAll('marker')\n      .data(['arrowhead', 'active-arrowhead', 'reversed-arrowhead', 'reversed-active-arrowhead'])\n    .enter().append('marker')\n      .attr({'id': function (d) { return d; },\n             'viewBox':'0 -5 10 10',\n             'refX': function (d) {\n               return (d.lastIndexOf('reversed-', 0) === 0) ? 0 : 10;\n             },\n             'orient':'auto',\n             'markerWidth':10,\n             'markerHeight':10\n            })\n    .append('path')\n      .attr('d', 'M 0 -5 L 10 0 L 0 5 Z')\n      .attr('transform', function (d) {\n        return (d.lastIndexOf('reversed-', 0) === 0) ? 'rotate(180 5 0)' : null;\n      });\n\n  // Force Layout Update\n  force.on('tick', function () {\n    // Keep coordinates in bounds. http://bl.ocks.org/mbostock/1129492\n    // NB. Bounding can cause node centers to coincide, especially at corners.\n    nodecircles.attr({cx: function (d) { return d.x = limitRange(nodeRadius, w - nodeRadius, d.x); },\n                      cy: function (d) { return d.y = limitRange(nodeRadius, h - nodeRadius, d.y); }\n    });\n\n    nodelabels.attr('x', function (d) { return d.x; })\n              .attr('y', function (d) { return d.y; });\n\n    edgepaths.attr('d', function (d) { return d.getPath(); });\n\n    edgegroups.each(function (d) { d.refreshLabels(); });\n\n    // Conserve CPU when layout is fully fixed\n    if (nodeArray.every(function (d) { return d.fixed; })) {\n      force.stop();\n    }\n  });\n  this.force = force;\n  /* eslint-enable no-invalid-this */\n}\n\n// Positioning\n\n// {[key: State]: Node} -> PositionTable\nvar getPositionTable = _.mapValues(_.pick(['x', 'y', 'px', 'py', 'fixed']));\n\n// Tag nodes w/ positions. Mutates the node map.\n// PositionTable -> {[key: State]: Node} -> void\nfunction setPositionTable(posTable, stateMap) {\n  _.forEach(function (node, state) {\n    var position = posTable[state];\n    if (position !== undefined) {\n      assign(node, position);\n    }\n  }, stateMap);\n}\n\nObject.defineProperty(StateViz.prototype, 'positionTable', {\n  get: function () { return getPositionTable(this.__stateMap); },\n  set: function (posTable) {\n    setPositionTable(posTable, this.__stateMap);\n    // ensure that a cooled layout will update\n    this.force.resume();\n  }\n});\n\n\nmodule.exports = StateViz;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/state-diagram/StateViz.js\n ** module id = 47\n ** module chunks = 0\n **/","'use strict';\nvar _ = require('lodash/fp');\n\n// Bidirectional infinite tape\nfunction Tape(blank, input) {\n  Object.defineProperty(this, 'blank', {\n    value: blank,\n    writable: false,\n    enumerable: true\n  });\n  // zipper data structure\n  // INVARIANTS: tape.before can be empty, tape.after must be nonempty.\n  // before: cells before the head (in order; left to right).\n  // after:  cells after and including the head (in reverse; right to left).\n  this.tape = {\n    before: [],\n    after: (input == null || input.length == 0) ? [blank] : input.slice().reverse(),\n    toString: function () {\n      return this.before.join('') + '🔎' + this.after.slice().reverse().join('');\n    }\n  };\n}\n\n// Read the value at the tape head.\nTape.prototype.read = function () {\n  return _.last(this.tape.after);\n};\nTape.prototype.write = function (symbol) {\n  this.tape.after[this.tape.after.length - 1] = symbol;\n};\n\nTape.prototype.headRight = function () {\n  var before = this.tape.before,\n      after = this.tape.after;\n  before.push(after.pop());\n  if (_.isEmpty(after)) {\n    after.push(this.blank);\n  }\n};\nTape.prototype.headLeft = function () {\n  var before = this.tape.before,\n      after = this.tape.after;\n  if (_.isEmpty(before)) {\n    before.push(this.blank);\n  }\n  after.push(before.pop());\n};\n\nTape.prototype.toString = function () {\n  return this.tape.toString();\n};\n\n// for tape visualization. not part of TM definition.\n// Read the value at an offset from the tape head.\n// 0 is the tape head. + is to the right, - to the left.\nTape.prototype.readOffset = function (i) {\n  var tape = this.tape;\n  if (i >= 0) {\n    // right side: offset [0..length-1] ↦ array index [length-1..0]\n    return (i <= tape.after.length - 1) ? tape.after[tape.after.length - 1 - i] : this.blank;\n  } else {\n    // left side: offset [-1..-length] ↦ array index [length-1..0]\n    return (i >= -tape.before.length) ? tape.before[tape.before.length + i] : this.blank;\n  }\n};\n\n// for tape visualization.\n// Read the values from an offset range (inclusive of start and end).\nTape.prototype.readRange = function (start, end) {\n  return _.range(start, end+1).map(function (i) {\n    return this.readOffset(i);\n  }, this);\n};\n\nmodule.exports = Tape;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tape/Tape.js\n ** module id = 48\n ** module chunks = 0\n **/","'use strict';\nvar Tape = require('./Tape.js'),\n    d3   = require('d3');\nrequire('./tape.css');\n\nvar cellWidth = 50;\nvar cellHeight = 50;\n\nfunction initTapeCells(selection) {\n  selection.attr('class', 'tape-cell');\n  selection.append('rect')\n      // the box outline is purely visual, so remove its data binding\n      .datum(null)\n      .attr({'width': cellWidth,\n             'height': cellHeight});\n  selection.append('text')\n      .text(function (d) { return d; })\n      .attr({'x': cellWidth/2, 'y': cellHeight/2 + 8});\n  return selection;\n}\n\nfunction positionCells(selection, offset) {\n  offset = (offset == null) ? 0 : offset;\n  selection.attr('transform', function (d, i) {\n    return 'translate(' + (-cellWidth+10 + cellWidth*(i+offset)) + ')';\n  });\n  return selection;\n}\n\nfunction repositionWrapper(wrapper) {\n  wrapper.attr('transform', 'translate(0 10)')\n    .transition()\n      .duration(0)\n    .select('.exiting')\n      .remove();\n}\n\n// Tape visualization centered around the tape head.\nfunction TapeViz(svg, lookaround, blank, input) {\n  Tape.call(this, blank, input);\n\n  Object.defineProperty(this, 'lookaround', {\n    value: lookaround,\n    writable: false,\n    enumerable: true\n  });\n  Object.defineProperty(this, 'domNode', {\n    value: svg,\n    writable: false,\n    enumerable: true\n  });\n\n  // TODO: factor out hard-coded constants\n  // width is before + head + after, trimming 2 off to show cut-off tape ends\n  var width  = cellWidth * (lookaround+1+lookaround-2) + 2*10;\n  var height = cellHeight + 2*10;\n  svg.attr({\n    'width': '95%',\n    'viewBox': [0, 0, width, height].join(' ')\n  });\n\n  this.wrapper = svg.append('g')\n      .attr('class', 'wrapper')\n      .call(repositionWrapper);\n\n  svg.append('rect')\n      .attr({'id': 'tape-head',\n             'width': (1+1/5) * cellWidth,\n             'height': (1+1/5) * cellHeight,\n             'x': -cellWidth+10/2 + cellWidth*lookaround,\n             'y': 10/2\n           });\n\n  this.wrapper.selectAll('.tape-cell')\n      .data(this.readRange(-lookaround, lookaround))\n    .enter()\n    .append('g')\n      .call(initTapeCells)\n      .call(positionCells)\n  ;\n}\n\nTapeViz.prototype = Object.create(Tape.prototype);\nTapeViz.prototype.constructor = TapeViz;\n\n// TODO: concurrently fade out old value and fade in new value\n// TODO: chain headLeft/Right to wait for write()?\nTapeViz.prototype.write = function (symbol) {\n  // don't animate if symbol stays the same\n  if (Tape.prototype.read.call(this) === symbol) {\n    return;\n  }\n  Tape.prototype.write.call(this, symbol);\n\n  // remove leftover .exiting in case animation was interrupted\n  this.wrapper.selectAll('.exiting').remove();\n\n  // TODO: replace with .selectAll('.tape-cell:not(.exiting)'),\n  // to avoid need to remove .exiting ?\n  d3.select(this.wrapper[0][0].childNodes[this.lookaround])\n      .datum(symbol)\n    .select('text')\n      .attr('fill-opacity', '1')\n      .attr('stroke-opacity', '1')\n    .transition()\n      .attr('fill-opacity', '0.4')\n      .attr('stroke-opacity', '0.1')\n    .transition()\n      .text(function (d) { return d; })\n      .attr('fill-opacity', '1')\n      .attr('stroke-opacity', '1')\n    .transition()\n      .duration(0)\n      .attr('fill-opacity', null)\n      .attr('stroke-opacity', null)\n    ;\n};\n\nfunction moveHead(wrapper, enter, exit, wOffset, cOffset) {\n  // add to one end\n  enter.call(initTapeCells);\n  // remove from the other end\n  exit.classed('exiting', true);\n  // translate cells forward, and the wrapper backwards\n  wrapper.selectAll('.tape-cell')\n      .call(positionCells, cOffset);\n  wrapper\n      .attr('transform', 'translate(' + (wOffset*cellWidth).toString() + ' 10)')\n    // animate wrapper returning to neutral position\n    .transition()\n      .call(repositionWrapper);\n}\n\nTapeViz.prototype.headRight = function () {\n  Tape.prototype.headRight.call(this);\n  // remove leftover .exiting in case animation was interrupted.\n  // Important: call-by-value evaluates the selection argument(s) of 'moveHead' before\n  // before entering the function, so exiting nodes have to be removed beforehand.\n  this.wrapper.selectAll('.exiting').remove();\n  moveHead(this.wrapper,\n    // add to right end\n    this.wrapper.append('g')\n        .datum(this.readOffset(this.lookaround)),\n    // remove from left end\n    this.wrapper.select('.tape-cell'),\n    1, -1);\n};\n\nTapeViz.prototype.headLeft = function () {\n  Tape.prototype.headLeft.call(this);\n  this.wrapper.selectAll('.exiting').remove();\n  moveHead(this.wrapper,\n    this.wrapper.insert('g', ':first-child')\n        .datum(this.readOffset(-this.lookaround)),\n    this.wrapper.select('.wrapper > .tape-cell:last-of-type'),\n    -1, 0);\n};\n\nmodule.exports = TapeViz;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tape/TapeViz.js\n ** module id = 49\n ** module chunks = 0\n **/"],"sourceRoot":""}